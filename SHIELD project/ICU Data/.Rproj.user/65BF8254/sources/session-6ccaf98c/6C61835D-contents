library(dplyr)
library(lubridate)
library(sf)

ICU = read.csv(file.choose(), sep=",", header=T)
Diagnoses = read.csv(file.choose(), sep=",", header=T)

combined_dataset = merge(ICU, Diagnoses[, c('hsp_account_id','ref_bill_code', 'DX_NAME')], by = 'hsp_account_id', all.x = TRUE)

# Convert to Date object first
combined_dataset$last_icu_dt = as.Date(combined_dataset$last_icu_dt, format="%m/%d/%Y, %I:%M:%S %p")

# Then, if needed, reformat to a different date format (not required if you just want a Date object)
combined_dataset$last_icu_dt = format(combined_dataset$last_icu_dt, "%m/%d/%Y")

# covid_levels = unique(combined_dataset$DX_NAME[grep("COVID-19", combined_dataset$DX_NAME, ignore.case = TRUE)])
# covid_levels

# COVID related ICD-10 codes
interesting_codes = c("Z20.822", "Z11.52", "Z86.16","M35.81", "J12.82", "U07.1", "B97.29", "J20.8", "J22", "J98.8", "J80", "Z03.818", "R05", "R06.02", "R50.9") 

combined_dataset = combined_dataset %>%
  mutate(first_icu_dt = mdy(first_icu_dt)) %>%  # Convert to Date format
  filter(st == "IL", 
         year(first_icu_dt) %in% c(2020, 2021), 
         ref_bill_code %in% interesting_codes)

# Assuming your dataframe is named df
combined_dataset = combined_dataset %>% 
  distinct(hsp_account_id, .keep_all = TRUE)

combined_dataset = combined_dataset %>%
  mutate(zipcode = substr(zipcode, 1, 5))

# Group by hsp_account_id, and count unique zip codes for each
unique_zip_counts = combined_dataset %>%
  group_by(hsp_account_id) %>%
  summarise(unique_zip_count = n_distinct(zipcode))

# To identify hsp_account_ids associated with more than one zip code
non_unique_zip_hsp = unique_zip_counts %>%
  filter(unique_zip_count > 1)


all_unique = all(unique_zip_counts$unique_zip_count == 1)

if (all_unique) {
  print("All hsp_account_ids belong to a unique zip code.")
} else {
  print("Some hsp_account_ids are associated with more than one zip code.")
}

#*****************************************************Zipcodes and Number of Patients********************************************************

count_per_zip = comb %>%
  group_by(zipcode) %>%
  summarise(total_hsp_account_ids = n_distinct(hsp_account_id))

count_per_zip = count_per_zip[order(count_per_zip$total_hsp_account_ids, decreasing = TRUE), ]

print(count_per_zip)

write.csv(count_per_zip, file = "C:/Users/skasaiesharifi/Documents/zipcodes and number of ICU patients.csv", row.names = FALSE)

#****************************************************Descriptive Analysis*****************************************************************

str(combined_dataset)
dim(combined_dataset)

combined_dataset$ethnic = as.factor(combined_dataset$ethnic)
levels(combined_dataset$ethnic)

combined_dataset %>%
  count(ethnic)

ggplot(combined_dataset, aes(x=ethnic, fill=ethnic)) + 
  geom_bar() + 
  labs(title="Ethnic Distribution", x="Ethnic Levels", y="Count") +
  scale_fill_brewer(palette="Spectral") + # Use a color palette for the fill
  theme_minimal() + # Optional: Applies a minimalistic theme
  theme(axis.text.x=element_blank()) # Remove x-axis text/labels

#*********************************************************************************

combined_dataset$gender = as.factor(combined_dataset$gender)
levels(combined_dataset$gender)

combined_dataset %>%
  count(gender)

ggplot(combined_dataset, aes(x=gender, fill=gender)) + 
  geom_bar() + 
  labs(title="Gender Distribution", x="Gender Levels", y="Count") +
  scale_fill_brewer(palette="Spectral") + 
  theme_minimal() +
  theme(axis.text.x=element_blank()) 

#*********************************************************************************

combined_dataset$race = as.factor(combined_dataset$race)
levels(combined_dataset$race)

combined_dataset %>%
  count(race)

ggplot(combined_dataset, aes(x=race, fill=race)) + 
  geom_bar() + 
  labs(title="Race Distribution", x="Race Levels", y="Count") +
  scale_fill_manual(values=c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", 
                             "#FFFF33", "#A65628", "#F781BF", "#999999", "#8DD3C7", 
                             "#BEBADA", "#FB8072", "#80B1D3", "#6F4E37", "#C4E17F",
                             "#F9F8E6", "#E1EDB9", "#F7C6C7")) +
  theme_minimal() +
  theme(axis.text.x=element_blank())

#*********************************************************************************

combined_dataset$city = as.factor(combined_dataset$city)
levels(combined_dataset$city)

city_count = combined_dataset %>%
  count(city)

city_count = city_count[order(city_count$n, decreasing = TRUE), ]

write.csv(city_count, file = "C:/Users/skasaiesharifi/Documents/city_count_V2.csv", row.names = FALSE)

#*********************************************************************************

combined_dataset$zipcode = as.factor(combined_dataset$zipcode)
levels(combined_dataset$zipcode)

zipcode_count = combined_dataset %>%
  count(zipcode)

zipcode_count = zipcode_count[order(zipcode_count$n, decreasing = TRUE), ]

write.csv(zipcode_count, file = "C:/Users/skasaiesharifi/Documents/zipcode_count_V2.csv", row.names = FALSE)

#*********************************************************************************

summary(combined_dataset$age)

boxplot(combined_dataset$age, main="Boxplot of Age", ylab="Values", xlab="Age")

install.packages("psych")
library(psych)

describe(combined_dataset$age)

#*********************************************************************************

summary(combined_dataset$icu_los)

boxplot(combined_dataset$icu_los, main="Boxplot of ICU_LOS", ylab="Values", xlab="ICU_LOS")

describe(combined_dataset$icu_los)

#*********************************************************************************

combined_dataset$financial_class = as.factor(combined_dataset$financial_class)
levels(combined_dataset$financial_class)

financial_class_count = combined_dataset %>%
  count(financial_class)

financial_class_count = financial_class_count[order(financial_class_count$n, decreasing = TRUE), ]

ggplot(combined_dataset, aes(x=financial_class, fill=financial_class)) + 
  geom_bar() + 
  labs(title="Financial Class Distribution", x="Financial Class Levels", y="Count") +
  scale_fill_manual(values=c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", 
                             "#FFFF33", "#A65628", "#F781BF", "#999999", "#8DD3C7", 
                             "#BEBADA", "#FB8072", "#80B1D3")) +
  theme_minimal() +
  theme(axis.text.x=element_blank())

#*********************************************************************************

correlation_result = cor(combined_dataset$age, combined_dataset$icu_los, method = "pearson", use = "complete.obs")
print(correlation_result)

correlation_result = cor(combined_dataset$age, combined_dataset$CharlestonScore, method = "pearson", use = "complete.obs")
print(correlation_result)

#*********************************************************************************
# Assuming your dataset is named `zipcodes_and_patients_V2`
filtered_zipcodes = count_per_zip %>%
  filter(total_hsp_account_ids > 10)
 
zip_code_boundary = zctas(cb = FALSE, state = "IL", year = 2010) %>% 
  filter(ZCTA5CE10 %in% filtered_zipcodes$zipcode)

zip_code_boundary_wgs84 = st_transform(zip_code_boundary, crs = 4326)

leaflet() %>% 
  addProviderTiles(providers$OpenStreetMap) %>% 
  setView(lng = -87.841695, lat = 41.879198, zoom = 10) %>%
  addPolygons(data = zip_code_boundary_wgs84, fillColor = "blue", fillOpacity = 0.2, color = "black", weight = 2, smoothFactor = 0.5)

#***********************************************************Number of Patients per Zipcode**********************************

filtered_ICU = ICU %>%
  filter(zipcode %in% filtered_zipcodes$zipcode)

# Calculate the total number of hsp_acc_id for each zipcode
total_hsp_acc_id_per_zipcode = filtered_ICU %>%
  group_by(zipcode) %>%
  summarise(total_hsp_acc_id = n())  # Counts the number of rows in each group, which corresponds to hsp_acc_id counts

total_hsp_acc_id_per_zipcode = total_hsp_acc_id_per_zipcode %>%
  rename(ICU_Admission = total_hsp_acc_id)

total_hsp_acc_id_per_zipcode = total_hsp_acc_id_per_zipcode[order(total_hsp_acc_id_per_zipcode$ICU_Admission, decreasing = TRUE), ]

#***********************************************************Number of Testing centers for each zipcode**********************************

Testing_centers = read.csv(file.choose(), sep=",", header=T)

filtered_Testing_Centers = Testing_centers %>%
  filter(Zip %in% filtered_zipcodes$zipcode)

total_test_center_per_zip = filtered_Testing_Centers %>%
  group_by(Zip) %>%
  summarise(Account.Name = n())

total_test_center_per_zip = total_test_center_per_zip %>%
  rename(Total_Test_Centers = Account.Name)

total_test_center_per_zip = total_test_center_per_zip %>%
  rename(zipcode = Zip)

total_test_center_per_zip = total_test_center_per_zip[order(total_test_center_per_zip$Total_Test_Centers, decreasing = TRUE), ]

#***********************************************************Merging Two Datasets**********************************

dim(total_test_center_per_zip)
dim(total_hsp_acc_id_per_zipcode)

# Assuming the zip code column in both datasets is named 'zipcode'

# Unique zip codes in the first dataset not in the second
unique_in_test_center = setdiff(total_test_center_per_zip$zipcode, total_hsp_acc_id_per_zipcode$zipcode)

# Unique zip codes in the second dataset not in the first
unique_in_hsp_acc_id = setdiff(total_hsp_acc_id_per_zipcode$zipcode, total_test_center_per_zip$zipcode)

# Print unique zip codes
print(unique_in_test_center)
print(unique_in_hsp_acc_id)

# Merging datasets
Merged_Dataset = total_test_center_per_zip %>%
  full_join(total_hsp_acc_id_per_zipcode, by = "zipcode") %>%
  # Replacing NA values with 0
  mutate(ICU_Admission = replace_na(ICU_Admission, 0),
         Total_Test_Centers = replace_na(Total_Test_Centers, 0))

register_google(key = "AIzaSyAkwdJeM7LFVthD5em9YkYchOADPuupai0")

geocoded_data = geocode(Merged_Dataset$zipcode, source = "google", output = "more")

Merged_Dataset$lon <- geocoded_data$lon
Merged_Dataset$lat <- geocoded_data$lat

Merged_Dataset$color = ifelse(Merged_Dataset$Total_Test_Centers == 0, "red", "blue")

leaflet(Merged_Dataset) %>%
  addTiles() %>%
  addCircles(lng = ~lon, lat = ~lat, color = ~color, opacity = 1, fillOpacity = 1, radius = 500)

#**********************************Association between ICU Admission and Number of Test Centers**********************************

Correlation_Result = cor(Merged_Dataset$Total_Test_Centers, Merged_Dataset$ICU_Admission, method = "pearson", use = "complete.obs")
print(Correlation_Result)


ggplot(Merged_Dataset, aes(x = Total_Test_Centers, y = ICU_Admission)) +
  geom_point(alpha = 0.5) +  # Adjust point transparency with alpha
  geom_smooth(method = "lm", color = "blue", se = FALSE) +  # Add a linear regression line
  labs(title = "Correlation between ICU Admissions and Total Test Centers",
       x = "ICU Admissions",
       y = "Total Number of Test Centers") +
  theme_minimal()  # Use a minimal theme for a cleaner look

