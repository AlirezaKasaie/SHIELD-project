SPCMN=read.csv(file.choose(), sep=",", header=T)
library(dplyr)
library(ggplot2)
library(tidyverse)
SPCMN_RJD=read.csv(file.choose(), sep=",", header=T)
SPCMN_RJD_NEW=read.csv(file.choose(), sep=",", header=T)
min(SPCMN_NEW$diff_TS, na.rm = TRUE)
min(SPCMN_RJD_NEW$diff_TS, na.rm = TRUE)
max(SPCMN_RJD_NEW$diff_TS, na.rm = TRUE)
mean(SPCMN_RJD_NEW$diff_TS, na.rm = TRUE)
View(SPCMN_RJD_NEW)
SPCMN_RJD$Ts..Lab. = mdy_hm(SPCMN_RJD$Ts..Lab.)
SPCMN_RJD$Ts..Specimen.Rejected. = mdy_hm(SPCMN_RJD$Ts..Specimen.Rejected.)
# Extract the date part for both columns
SPCMN_RJD$Date.Lab = as.Date(SPCMN_RJD$Ts..Lab.)
SPCMN_RJD$Date.Specimen.Rejected = as.Date(SPCMN_RJD$Ts..Specimen.Rejected.)
# Extract the time part for both columns
SPCMN_RJD$Time.Lab = format(SPCMN_RJD$Ts..Lab., "%H:%M")
SPCMN_RJD$Time.Specimen.Rejected = format(SPCMN_RJD$Ts..Specimen.Rejected., "%H:%M")
View(SPCMN_RJD)
register_google(key = "AIzaSyAkwdJeM7LFVthD5em9YkYchOADPuupai0")
if (!requireNamespace("ggmap", quietly = TRUE)) install.packages("ggmap")
if (!requireNamespace("readxl", quietly = TRUE)) install.packages("readxl")
if (!requireNamespace("writexl", quietly = TRUE)) install.packages("writexl")
library(ggmap)
library(readxl)
library(writexl)
library(readxl)
register_google(key = "AIzaSyAkwdJeM7LFVthD5em9YkYchOADPuupai0")
Data =  read.csv(file.choose(), sep=",", header=T)
addresses = Data$Lab.Center.ADDRESS
Data =  read.csv(file.choose(), sep=",", header=T)
addresses = Data$Lab.Center.ADDRESS
geocoded_addresses = geocode(addresses)
warnings()
illinois_map = get_map(location = 'Illinois', zoom = 7)
ggmap(illinois_map) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
geocoded_addresses = geocode(addresses)
rlang::last_trace()
Data =  read.csv(file.choose(), sep=",", header=T)
addresses = Data$Lab.Center.ADDRESS
geocoded_addresses = geocode(addresses)
illinois_map = get_map(location = 'Illinois', zoom = 7)
ggmap(illinois_map) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
library(sf)
install.packages("sf")
library(sf)
if (!requireNamespace("tigris", quietly = TRUE)) install.packages("tigris")
library(tigris)
options(tigris_use_cache = TRUE, tigris_class = "sf")
illinois_shape <- states(cb = TRUE) %>%
filter(STUSPS == "IL")
# Plot the shapefile to check it
plot(illinois_shape$geometry)
illinois_shape = states(cb = TRUE) %>%
filter(STUSPS == "IL")
library(dplyr)
options(tigris_use_cache = TRUE, tigris_class = "sf")
illinois_shape <- states(cb = TRUE) %>%
filter(STUSPS == "IL")
# Plot the shapefile to check it
plot(illinois_shape$geometry)
# Save the shapefile to disk
st_write(illinois_shape, "Illinois_shapefile.shp")
illinois_map = get_map(location = 'Illinois', zoom = 7)
ggmap(illinois_map) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
options(tigris_use_cache = TRUE, tigris_class = "sf")
illinois_shape <- states(cb = TRUE) %>%
filter(STUSPS == "IL")
# Get the base map of Illinois
illinois_map = get_map(location = 'Illinois', zoom = 7)
# Prepare the map with ggmap
base_map <- ggmap(illinois_map)
boundaries_map <- base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="black") +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Get the base map of Illinois
illinois_map = get_map(location = 'Illinois', zoom = 6)
# Prepare the map with ggmap
base_map <- ggmap(illinois_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map <- base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="black", size = 2) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map <- base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="black", size = 10) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map <- base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="black", size = 100) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Get the base map of Illinois
illinois_map = get_map(location = 'Illinois', zoom = 6.5)
# Prepare the map with ggmap
base_map <- ggmap(illinois_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map <- base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="black", size = 100) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Get the base map of Illinois
illinois_map = get_map(location = 'Illinois', zoom = 7)
# Prepare the map with ggmap
base_map <- ggmap(illinois_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map <- base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="black", size = 100) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
boundaries_map <- base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="black", size = 2.5) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Get the base map of Illinois
illinois_map = get_map(location = 'Illinois', zoom = 6)
# Prepare the map with ggmap
base_map <- ggmap(illinois_map)
boundaries_map <- base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="black", size = 2.5) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map = base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="Black", size = 2.5) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
geocoded_addresses_with_city <- merge(geocoded_addresses, Data[, c("Lab.Center.ADDRESS", "City")], by.x="address", by.y="Lab.Center.ADDRESS", all.x=TRUE)
# Get the base map of Illinois
illinois_map = get_map(location = 'Illinois', zoom = 5)
# Prepare the map with ggmap
base_map = ggmap(illinois_map)
boundaries_map = base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="Black", size = 2.5) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "Red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map = base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="Black", size = 500) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "Red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map = base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="Black", size = 2) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "Red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Get the base map of Illinois
illinois_map = get_map(location = 'Illinois', zoom = 7)
# Prepare the map with ggmap
base_map = ggmap(illinois_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map = base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="Black", size = 2) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "Red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Get the base map of Illinois
illinois_map = get_map(location = 'Illinois', zoom = 6)
# Prepare the map with ggmap
base_map = ggmap(illinois_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map = base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="Black", size = 2) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "Red", size = 3, alpha = 0.5) +
labs(title = "Addresses in Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
# Add the boundaries of Illinois
# Since `illinois_shape` is already an sf object, you can use geom_sf directly
boundaries_map = base_map +
geom_sf(data = illinois_shape, inherit.aes = FALSE, fill=NA, color="Black", size = 2) +
geom_point(data = geocoded_addresses, aes(x = lon, y = lat), color = "Red", size = 3, alpha = 0.5) +
labs(title = "Lab Center Addresses in State of Illinois")
# Plot the map with Illinois boundaries and geocoded addresses
print(boundaries_map)
View(Data)
test_centers= read.csv(file.choose(), sep=",", header=T)
unique_locations = unique(test_centers$Lab.Center.LOCATION)
unique_locations = as.data.frame(unique_locations)
View(unique_locations)
write.csv(unique_locations, file = "C:/Users/skasaiesharifi/Documents/unique_test_centers.csv", row.names = FALSE)
get_geocoding_data = function(location, api_key) {
base_url = "https://maps.googleapis.com/maps/api/geocode/json"
response = GET(url = base_url, query = list(address = location, key = api_key))
data = fromJSON(rawToChar(response$content))
if (data$status == "OK") {
address <- data$results[[1]]$formatted_address
latitude <- data$results[[1]]$geometry$location$lat
longitude <- data$results[[1]]$geometry$location$lng
postal_code <- NA
address_components <- data$results[[1]]$address_components
for (component in address_components) {
if ("postal_code" %in% component$types) {
postal_code <- component$long_name
break
}
}
return(list(address = address, latitude = latitude, longitude = longitude, postal_code = postal_code))
} else {
return(list(address = NA, latitude = NA, longitude = NA, postal_code = NA))
}
}
api_key = "AIzaSyAkwdJeM7LFVthD5em9YkYchOADPuupai0"
results_df = data.frame(Address = character(), Latitude = numeric(), Longitude = numeric(), PostalCode = character(), stringsAsFactors = FALSE)
for (location in unique_locations$unique_locations) {
geocoding_data = get_geocoding_data(location, api_key)
results_df = rbind(results_df, c(geocoding_data$address, geocoding_data$latitude, geocoding_data$longitude, geocoding_data$postal_code))
}
if (!requireNamespace("httr", quietly = TRUE)) install.packages("httr")
if (!requireNamespace("jsonlite", quietly = TRUE)) install.packages("jsonlite")
library(httr)
library(jsonlite)
for (location in unique_locations$unique_locations) {
geocoding_data = get_geocoding_data(location, api_key)
results_df = rbind(results_df, c(geocoding_data$address, geocoding_data$latitude, geocoding_data$longitude, geocoding_data$postal_code))
}
s
View(results_df)
results_df = data.frame(Address = character(), Latitude = numeric(), Longitude = numeric(), PostalCode = character(), stringsAsFactors = FALSE)
for (location in unique_locations$unique_locations) {
geocoding_data = get_geocoding_data(location, api_key)
results_df = rbind(results_df, c(geocoding_data$address, geocoding_data$latitude, geocoding_data$longitude, geocoding_data$postal_code))
}
colnames(results_df) = c("Address", "Latitude", "Longitude", "PostalCode")
View(results_df)
is.na(unique_locations)
sum(is.na(unique_locations))
for (location in unique_locations$unique_locations) {
geocoding_data = get_geocoding_data(location, api_key)
temp_df = data.frame(Address = geocoding_data$address,
Latitude = geocoding_data$latitude,
Longitude = geocoding_data$longitude,
PostalCode = geocoding_data$postal_code, stringsAsFactors = FALSE)
results_df = rbind(results_df, temp_df)
}
test_centers= read.csv(file.choose(), sep=",", header=T)
View(test_centers)
unique_locations = unique(test_centers$Lab.Center.LOCATION)
unique_locations = as.data.frame(unique_locations)
sum(is.na(unique_locations))
api_key = "AIzaSyAkwdJeM7LFVthD5em9YkYchOADPuupai0"
register_google(key = api_key)
register_google(key = "AIzaSyAkwdJeM7LFVthD5em9YkYchOADPuupai0")
library(ggmap)
library(dplyr)
register_google(key = "AIzaSyAkwdJeM7LFVthD5em9YkYchOADPuupai0")
get_location_details = function(location) {
result = geocode(location, output = "more")
return(data.frame(address = result$formatted_address,
latitude = result$lat,
longitude = result$lon,
zip_code = sub(".*\\s(\\d+)$", "\\1", result$postal_code)))
}
details_df = lapply(unique_locations$unique_locations, get_location_details) %>%
bind_rows()
get_real_addresses = function(locations) {
addresses <- sapply(locations, function(location) {
# Attempt to geocode the location, catching any errors
result <- tryCatch({
geocode(location, output = "more")
}, error = function(e) {
# Return NA in a data frame format to match expected structure
data.frame(address = NA, stringsAsFactors = FALSE)
})
# Check if the result is a data frame and has at least one row
if (is.data.frame(result) && nrow(result) > 0) {
# Ensure the 'address' column exists before attempting to access it
if ("address" %in% names(result)) {
return(result$address[1])
}
}
# Return NA if the above conditions are not met
return(NA)
}, USE.NAMES = FALSE)
return(addresses)
}
View(unique_locations)
names(unique_locations)[1] = "lab_centers_location"
View(unique_locations)
# Get the exact addresses for each location
unique_locations$lab_centers_location <- sapply(unique_locations$location, get_exact_address)
get_real_addresses = function(locations) {
addresses <- sapply(locations, function(location) {
# Attempt to geocode the location, catching any errors
result <- tryCatch({
geocode(location, output = "more")
}, error = function(e) {
# Return NA in a data frame format to match expected structure
data.frame(address = NA, stringsAsFactors = FALSE)
})
# Check if the result is a data frame and has at least one row
if (is.data.frame(result) && nrow(result) > 0) {
# Ensure the 'address' column exists before attempting to access it
if ("address" %in% names(result)) {
return(result$address[1])
}
}
# Return NA if the above conditions are not met
return(NA)
}, USE.NAMES = FALSE)
return(addresses)
}
# Get the exact addresses for each location
unique_locations$lab_centers_location <- sapply(unique_locations$location, get_real_address)
# Get the exact addresses for each location
unique_locations$lab_centers_location <- sapply(unique_locations$location, get_real_addresses)
api_key <- "AIzaSyAkwdJeM7LFVthD5em9YkYchOADPuupai0"
register_google(key = api_key)
get_real_addresses <- function(locations) {
addresses <- sapply(locations, function(location) {
result <- tryCatch({
geocode(location, output = "more")
}, error = function(e) {
return(NA)
})
if (!is.na(result) && nrow(result) > 0 && "address" %in% names(result)) {
return(result$address[1])
} else {
return(NA)
}
}, USE.NAMES = FALSE)
return(addresses)
}
# Assuming the locations are in a column named 'Lab Center Location'
locations_vector <- unique_locations$lab_centers_location
# Get addresses
addresses <- get_real_addresses(locations_vector)
get_real_addresses <- function(locations) {
addresses <- sapply(locations, function(location) {
# Attempt to geocode the location, capturing any potential errors
result <- tryCatch({
geocode(location, output = "more")
}, error = function(e) {
# Return a structure that signifies an error to the outer logic
return(list(error = TRUE, message = e$message))
})
# Check if result indicates an error or if it's not in the expected format
if (is.list(result) && !is.null(result$error)) {
NA  # Return NA if there was an error in geocoding
} else if (is.data.frame(result) && nrow(result) > 0) {
# Return the first address if result is as expected
result$address[1]
} else {
NA  # Return NA if the result doesn't match expected successful output
}
}, USE.NAMES = FALSE)
return(addresses)
}
# Assuming the locations are in a column named 'Lab Center Location'
locations_vector <- unique_locations$lab_centers_location
# Get addresses
addresses <- get_real_addresses(locations_vector)
View(addresses)
addresses = as.data.frame(addresses)
print(addresses)
